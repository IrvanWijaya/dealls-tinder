// Code generated by MockGen. DO NOT EDIT.
// Source: .\services\auth.service.go
//
// Generated by this command:
//
//	mockgen -source .\services\auth.service.go -destination .\services\auth.service_mock.go -package services DBItf
//

// Package services is a generated GoMock package.
package services

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockDBItf is a mock of DBItf interface.
type MockDBItf struct {
	ctrl     *gomock.Controller
	recorder *MockDBItfMockRecorder
}

// MockDBItfMockRecorder is the mock recorder for MockDBItf.
type MockDBItfMockRecorder struct {
	mock *MockDBItf
}

// NewMockDBItf creates a new mock instance.
func NewMockDBItf(ctrl *gomock.Controller) *MockDBItf {
	mock := &MockDBItf{ctrl: ctrl}
	mock.recorder = &MockDBItfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBItf) EXPECT() *MockDBItfMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDBItf) Create(value any) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", value)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockDBItfMockRecorder) Create(value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDBItf)(nil).Create), value)
}

// First mocks base method.
func (m *MockDBItf) First(dest any, conds ...any) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []any{dest}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "First", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// First indicates an expected call of First.
func (mr *MockDBItfMockRecorder) First(dest any, conds ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{dest}, conds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "First", reflect.TypeOf((*MockDBItf)(nil).First), varargs...)
}
